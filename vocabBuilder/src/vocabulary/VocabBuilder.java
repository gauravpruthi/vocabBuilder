/*
 * Copyright (c) 2015 Gaurav Pruthi, All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package vocabulary;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class VocabBuilder extends javax.swing.JFrame {
    private boolean updateFlag = false;

    /**
     * Creates new form Find
     * @throws java.io.FileNotFoundException
     */
    public VocabBuilder() throws FileNotFoundException, MalformedURLException {
        initComponents();
        wb = new WordBuilder();
        wb.readAndBuild();
        wb.printmap();
        //It is relative to src folder
        URL imageUrl = this.getClass().getResource("src/Resources/vocab.png");
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.createImage(imageUrl);
        this.setIconImage(img);
              
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wordLabel = new javax.swing.JLabel();
        wordField = new javax.swing.JTextField();
        insertButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        meaningLabel = new javax.swing.JLabel();
        synLabel = new javax.swing.JLabel();
        descLabel = new javax.swing.JLabel();
        meaningField = new javax.swing.JTextField();
        synField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descArea = new javax.swing.JTextArea();
        antLabel = new javax.swing.JLabel();
        antField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        searchButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VocabBuilder");
        setFont(new java.awt.Font("Courier 10 Pitch", 1, 12)); // NOI18N

        wordLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        wordLabel.setText("Word:");

        insertButton.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonAction(evt);
            }
        });

        exitButton.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        exitButton.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbuttonAction(evt);
            }
        });

        meaningLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        meaningLabel.setText("Meaning:");

        synLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        synLabel.setText("Synonyms:");

        descLabel.setFont(new java.awt.Font("Comic Sans MS", 3, 15)); // NOI18N
        descLabel.setText("Description:");

        descArea.setColumns(20);
        descArea.setRows(5);
        jScrollPane1.setViewportView(descArea);

        antLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        antLabel.setText("Antonyms;");

        deleteButton.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonAction(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttonAction(evt);
            }
        });

        searchButton1.setFont(new java.awt.Font("Comic Sans MS", 1, 15)); // NOI18N
        searchButton1.setText("Update");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1searchbuttonAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(layout.createSequentialGroup()
                                .add(antLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(antField))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(wordLabel)
                                    .add(meaningLabel)
                                    .add(synLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(synField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 461, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(wordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 272, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(searchButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(meaningField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 378, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(0, 13, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(descLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(47, 47, 47)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 338, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(insertButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(26, 26, 26)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(wordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(wordLabel)
                    .add(searchButton)
                    .add(searchButton1))
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(meaningLabel)
                    .add(meaningField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(synLabel)
                    .add(synField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(antLabel)
                    .add(antField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(descLabel))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(insertButton)
                    .add(exitButton)
                    .add(deleteButton))
                .add(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonAction
        // TODO add your handling code here:
        
        //Please do not enter the \n after the last line
        try{
            String word = (wordField.getText()).toLowerCase();
            if ( wordExists(word)) {
                JOptionPane.showMessageDialog(this, "Word already exists");
                return;
            }
                
            if(word.length() == 0) {
                JOptionPane.showMessageDialog(this, "Please enter the word");
                return;
            }
            String meaning = (meaningField.getText()).toLowerCase();
            if(meaning.length() == 0) {
                JOptionPane.showMessageDialog(this, "Please enter the meaning of word");
                return;
            }
            String syn = (synField.getText()).toLowerCase().replaceAll("\\s","");
            String ant = (antField.getText()).toLowerCase().replaceAll("\\s","");
            String desc = (descArea.getText()).toLowerCase();

            if(syn.length() == 0) syn = " ";
            if(ant.length() == 0) ant = " ";
            if(desc.length() == 0) desc = " ";
            FileWriter fw = new FileWriter("/home/gaurav/manning", true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter out = new PrintWriter(bw);

            out.println(word + ";" + meaning + ";" + syn + ";" + ant + ";" + desc);

            out.close();
            bw.close();
            fw.close();
            
            if(!updateFlag)
                JOptionPane.showMessageDialog(this, "Word Added Successfully");
            //Load words again in map
            wb.readAndBuild();
     
        }
        catch (IOException e) {
        }
        clearAllFields();
        updateFlag = false;
    }//GEN-LAST:event_insertButtonAction

    private void exitbuttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbuttonAction
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitbuttonAction

    private void deletebuttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonAction
        
        int dialogButton = JOptionPane.YES_NO_OPTION;
        ///Get the text from the word field, if it is there then try deleting that...
        String word = (wordField.getText()).toLowerCase();
        if(word.length() == 0) {
                JOptionPane.showMessageDialog(this, "Please enter the word");
                return;
        }
        try {
            if (!wordExists(word)) {
                JOptionPane.showMessageDialog(this, "Word not in database");
                return;
            }
                
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(!updateFlag) {
            if (JOptionPane.showConfirmDialog (null, "Are you sure?","Warning",dialogButton) == JOptionPane.NO_OPTION) {
                //clearAllFields();
                return;
            }
        }
            
                
        File tempFile = new File("/home/gaurav/manningTemp");
        File inputFile = new File("/home/gaurav/manning");
        
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(inputFile));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(tempFile));
        } catch (IOException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }

        Scanner sc = null;
        try {
            sc = new Scanner(inputFile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String lineToRemove = null, currentLine;
        while(sc.hasNextLine()){
            String line = sc.nextLine();
            String words[] = line.split(";");
            if(words[0].compareTo(word) == 0) {
                lineToRemove = line;
            }
            
        }

        try {
            while((currentLine = reader.readLine()) != null) {
                // trim newline when comparing with lineToRemove
                String trimmedLine = currentLine.trim();
                if(trimmedLine.equals(lineToRemove)) continue;
                try {
                    writer.write(currentLine + System.getProperty("line.separator"));
                } catch (IOException ex) {
                    Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try { 
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try { 
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        boolean successful = tempFile.renameTo(inputFile);
        if(successful && !updateFlag) {
            JOptionPane.showMessageDialog(this, "Word deleted successfully");
            clearAllFields();
        }
        
        
        
    }//GEN-LAST:event_deletebuttonAction

    private void searchbuttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbuttonAction
        // TODO add your handling code here:
        File file = new File("/home/gaurav/manning");
        String word = (wordField.getText()).toLowerCase();
        if(word.length() == 0) {
                JOptionPane.showMessageDialog(this, "Please enter the word");
                return;
        }
      
       
        Scanner sc = null;
        try {
            sc = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        while(sc.hasNextLine()){
            String line = sc.nextLine();
            String words[] = line.split(";");
            if(words[0].compareTo(word) == 0) {
                meaningField.setText(words[1]);
                synField.setText(words[2]);
                antField.setText(words[3]);
                descArea.setText(words[4]);
                return;
            }
            
        }
        JOptionPane.showMessageDialog(this, "Word doesn't exist");
        
                
        
        
    }//GEN-LAST:event_searchbuttonAction

    private void updateButton1searchbuttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1searchbuttonAction
        // TODO add your handling code here:
        // sarch button fills the fields and then what happens is that
        updateFlag = true;
        deletebuttonAction(evt);
        insertButtonAction(evt);
        JOptionPane.showMessageDialog(this, "Word updated successfully");
    }//GEN-LAST:event_updateButton1searchbuttonAction

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set
     * @throws java.io.FileNotFoundException
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx = 0; idx < installedLookAndFeels.length; idx++) {
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VocabBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VocabBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VocabBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VocabBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //WordBuilder related code
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VocabBuilder().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(VocabBuilder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    //Custom variables
    private WordBuilder wb;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField antField;
    private javax.swing.JLabel antLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descArea;
    private javax.swing.JLabel descLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField meaningField;
    private javax.swing.JLabel meaningLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JTextField synField;
    private javax.swing.JLabel synLabel;
    private javax.swing.JTextField wordField;
    private javax.swing.JLabel wordLabel;
    // End of variables declaration//GEN-END:variables

    private boolean wordExists(String word) throws FileNotFoundException {
        
        File file = new File("/home/gaurav/manning");
        Scanner sc = new Scanner(file);
        while(sc.hasNextLine()){
            String line = sc.nextLine();
            String words[] = line.split(";");
            if(words[0].compareTo(word) == 0) {
                return true;
            }
            
        }
        return false;
    }

    private void clearAllFields() {
        wordField.setText("");
        meaningField.setText("");
        synField.setText("");
        antField.setText("");
        descArea.setText("");
    }

}
